import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { collection, doc, getDoc, getDocs, query, where } from 'firebase/firestore';
import React, { useEffect, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import {
    ActivityIndicator,
    Alert,
    Animated,
    Dimensions,
    Image,
    ImageBackground,
    InteractionManager,
    Linking,
    Platform,
    SafeAreaView,
    ScrollView,
    StyleSheet,
    Text,
    TouchableOpacity,
    View
} from 'react-native';
import { getCurrentUser, getUserNotifications, NotificationData } from '../../services/firebase';
import AboutModal from '../components/AboutModal';
import SideMenu from '../components/SideMenu';
import TopNav from '../components/TopNav';

// Preview mode detection
const isPreviewMode = Platform.OS === 'web' && __DEV__;

const { height } = Dimensions.get('window');

interface HomeScreenProps {
  onNavigate: (screen: string) => void;
}

const NeonButton: React.FC<{ 
  title: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary';
  style?: any;
}> = ({ title, onPress, variant = 'primary', style }) => {
  return (
    <TouchableOpacity
      style={[ 
        styles.neonButton,
        variant === 'primary' ? styles.neonButtonPrimary : styles.neonButtonSecondary,
        style,
      ]}
      onPress={onPress}
    >
      <Text style={[ 
        styles.neonButtonText,
        variant === 'primary' ? styles.neonButtonTextPrimary : styles.neonButtonTextSecondary,
      ]}>
        {title}
      </Text>
    </TouchableOpacity>
  );
};

function HomeScreen({ onNavigate }: HomeScreenProps) {
  const { t } = useTranslation();
  const [loading, setLoading] = useState(true);
  const [imagesLoading, setImagesLoading] = useState(true);
  const [sideMenuVisible, setSideMenuVisible] = useState(false);
  const [showAboutModal, setShowAboutModal] = useState(false);
  const [notificationPanelVisible, setNotificationPanelVisible] = useState(false);
  const [showTerms, setShowTerms] = useState(false);
  const [settingsImages, setSettingsImages] = useState<{
    atmosphere: string;
    aboutUs: string;
    gallery: string[];
    aboutUsBottom: string;
  }>({ 
    atmosphere: '',
    aboutUs: '',
    gallery: [],
    aboutUsBottom: '',
  });
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);
  const [isBarber, setIsBarber] = useState(false);
  const [welcomeMessage, setWelcomeMessage] = useState('ברוכים הבאים ל-Barbers Bar!');
  const [subtitleMessage, setSubtitleMessage] = useState('המספרה המקצועית שלך');
  const [aboutUsMessage, setAboutUsMessage] = useState('ברוכים הבאים ל-Barbers Bar! כאן תיהנו מחוויה אישית, מקצועית ומפנקת, עם יחס חם לכל לקוח. רן אגלריסי, בעל ניסיון של שנים בתחום, מזמין אתכם להתרווח, להתחדש ולהרגיש בבית.');
  const [showPopup, setShowPopup] = useState(false);
  const [popupMessage, setPopupMessage] = useState('');

  const [notifications, setNotifications] = useState<NotificationData[]>([]);

  // Animation refs
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(50)).current;
  const headerFade = useRef(new Animated.Value(0)).current;
  const ctaFade = useRef(new Animated.Value(0)).current;
  const cardsFade = useRef(new Animated.Value(0)).current;

  // 3D Carousel refs - Enhanced for better 3D effect
  const carousel3DRef = useRef<ScrollView>(null);
  const cardWidth = 280;
  const cardHeight = 380; // Better aspect ratio for 3D effect
  const cardSpacing = 20; // More spacing for better 3D separation
  const scrollX = useRef(new Animated.Value(0)).current;
  const isJumping = useRef(false);
  const autoScrollRef = useRef<NodeJS.Timeout | null>(null);

  // Get original images array from Firebase Storage
  console.log('Gallery images from Firebase:', settingsImages.gallery);
  console.log('Gallery length:', settingsImages.gallery.length);
  
  // Only show gallery if we have Firebase images and they're loaded
  const originalImages = settingsImages.gallery.length > 0 ? settingsImages.gallery : [];

  // Create smooth infinite loop gallery with 7 copies for ultra-smooth scrolling
  const galleryImages = originalImages.length > 0 ? [
    ...originalImages, 
    ...originalImages, 
    ...originalImages, 
    ...originalImages, 
    ...originalImages,
    ...originalImages,
    ...originalImages
  ] : [];
  const originalLength = originalImages.length;
  const itemWidth = cardWidth + cardSpacing;

  // Enhanced 3D Transform function for carousel cards
  const getCardTransform = (index: number, scrollXValue: Animated.Value) => {
    const cardOffset = index * (cardWidth + cardSpacing);
    const inputRange = [
      cardOffset - cardWidth - cardSpacing,
      cardOffset - cardWidth / 2,
      cardOffset,
      cardOffset + cardWidth / 2,
      cardOffset + cardWidth + cardSpacing,
    ];
    
    const translateX = scrollXValue.interpolate({
      inputRange,
      outputRange: [cardWidth / 2, cardWidth / 4, 0, -cardWidth / 4, -cardWidth / 2],
      extrapolate: 'clamp',
    });
    
    const scale = scrollXValue.interpolate({
      inputRange,
      outputRange: [0.9, 0.95, 1, 0.95, 0.9], // Less dramatic scaling
      extrapolate: 'clamp',
    });
    
    const rotateY = scrollXValue.interpolate({
      inputRange,
      outputRange: ['-15deg', '-8deg', '0deg', '8deg', '15deg'], // Less dramatic rotation
      extrapolate: 'clamp',
    });
    
    const opacity = scrollXValue.interpolate({
      inputRange,
      outputRange: [0.8, 0.9, 1, 0.9, 0.8], // Less dramatic opacity - all images visible
      extrapolate: 'clamp',
    });

    const translateY = scrollXValue.interpolate({
      inputRange,
      outputRange: [50, 25, 0, 25, 50],
      extrapolate: 'clamp',
    });

    const rotateX = scrollXValue.interpolate({
      inputRange,
      outputRange: ['15deg', '8deg', '0deg', '8deg', '15deg'],
      extrapolate: 'clamp',
    });

    return {
      transform: [
        { translateX },
        { translateY },
        { scale },
        { rotateY },
        { rotateX },
        { perspective: 1200 },
      ],
      opacity,
    };
  };

  // Ultra-smooth infinite scroll with 7-copy system
  const handleScroll = (event: any) => {
    if (originalLength === 0 || isJumping.current) return;
    
    const offsetX = event.nativeEvent.contentOffset.x;
    const totalWidth = originalLength * itemWidth;
    
    // With 7 copies, we have more room for smooth transitions
    // Structure: [1][2][3][4][5][6][7] where we start at position 3
    const rightBoundary = totalWidth * 4.8; // Near end of 5th set
    const leftBoundary = totalWidth * 2.2;  // Near beginning of 3rd set
    
    // When scrolling right beyond 5th set, jump back by one set
    if (offsetX >= rightBoundary) {
      isJumping.current = true;
      const newPosition = offsetX - totalWidth;
      console.log('🔄 Gallery: Ultra-smooth loop forward', { 
        from: Math.round(offsetX), 
        to: Math.round(newPosition),
        totalWidth: Math.round(totalWidth)
      });
      
      requestAnimationFrame(() => {
        carousel3DRef.current?.scrollTo({
          x: newPosition,
          animated: false,
        });
        
        setTimeout(() => {
          isJumping.current = false;
        }, 50);
      });
    }
    // When scrolling left beyond 3rd set, jump forward by one set
    else if (offsetX <= leftBoundary) {
      isJumping.current = true;
      const newPosition = offsetX + totalWidth;
      console.log('🔄 Gallery: Ultra-smooth loop backward', { 
        from: Math.round(offsetX), 
        to: Math.round(newPosition),
        totalWidth: Math.round(totalWidth)
      });
      
      requestAnimationFrame(() => {
        carousel3DRef.current?.scrollTo({
          x: newPosition,
          animated: false,
        });
        
        setTimeout(() => {
          isJumping.current = false;
        }, 50);
      });
    }
  };

  // Initialize gallery to start at the 3rd set (middle of 7 copies) for ultra-smooth scrolling
  useEffect(() => {
    if (originalLength > 0 && carousel3DRef.current) {
      // Use a longer timeout to ensure the gallery is fully loaded
      const timer = setTimeout(() => {
        const startPosition = originalLength * itemWidth * 3; // Start at 4th set (middle of 7)
        console.log('🎯 Initializing gallery at position:', Math.round(startPosition));
        carousel3DRef.current?.scrollTo({
          x: startPosition,
          animated: false,
        });
      }, 800); // Longer timeout for better stability
      
      return () => clearTimeout(timer);
    }
  }, [originalLength, itemWidth, galleryImages.length]);

  // Auto-scroll gallery every 4 seconds with better control
  useEffect(() => {
    if (originalLength === 0) return;
    
    const startAutoScroll = () => {
      autoScrollRef.current = setInterval(() => {
        if (carousel3DRef.current && !isJumping.current) {
          // Use a ref to track current position instead of accessing _value
          const nextPosition = (scrollX as any)._value + itemWidth;
          carousel3DRef.current.scrollTo({
            x: nextPosition,
            animated: true,
          });
        }
      }, 4000); // Slower auto-scroll for better viewing
    };

    // Start auto-scroll after a delay
    const startTimer = setTimeout(startAutoScroll, 2000);
    
    return () => {
      clearTimeout(startTimer);
      if (autoScrollRef.current) {
        clearInterval(autoScrollRef.current);
      }
    };
  }, [originalLength, itemWidth]);

  useEffect(() => {
    setTimeout(() => {
      setLoading(false);
    }, 1500);
  }, []);

  useEffect(() => {
    if (!loading) {
      Animated.sequence([
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 400,
          useNativeDriver: true,
        }),
        Animated.parallel([
          Animated.timing(headerFade, {
            toValue: 1,
            duration: 300,
            useNativeDriver: true,
          }),
          Animated.timing(slideAnim, {
            toValue: 0,
            duration: 300,
            useNativeDriver: true,
          }),
        ]),
        Animated.timing(ctaFade, {
          toValue: 1,
          duration: 250,
          useNativeDriver: true,
        }),
        Animated.timing(cardsFade, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true,
        }),
      ]).start();
    }
  }, [loading]);

  useEffect(() => {
    // In preview mode, skip Firebase operations and use fallback data
    if (isPreviewMode) {
      console.log('🌐 Preview mode detected, using fallback data');
      setImagesLoading(false);
      setLoading(false);
      setWelcomeMessage('ברוכים הבאים ל-Barbers Bar!');
      setSubtitleMessage('המספרה המקצועית שלך');
      setAboutUsMessage('ברוכים הבאים ל-Barbers Bar! כאן תיהנו מחוויה אישית, מקצועית ומפנקת, עם יחס חם לכל לקוח. רן אגלריסי, בעל ניסיון של שנים בתחום, מזמין אתכם להתרווח, להתחדש ולהרגיש בבית.');
      return;
    }

    // Use InteractionManager to defer heavy Firebase operations
    InteractionManager.runAfterInteractions(async () => {
      // Wait for Firebase to be ready before making calls
      try {
        const { checkFirebaseReady } = await import('../config/firebase');
        const isReady = await checkFirebaseReady(5000);
        
        if (isReady) {
          console.log('✅ Firebase ready, loading HomeScreen data');
          fetchImages();
          fetchMessages();
        } else {
          console.warn('⚠️ Firebase not ready, using fallback data');
          setImagesLoading(false);
        }
      } catch (error) {
        console.error('❌ Firebase readiness check failed:', error);
        setImagesLoading(false);
      }
    });

    // Set up auth state listener with enhanced error handling (skip in preview mode)
    let unsubscribe: (() => void) | null = null;
    
    const setupAuthListener = async () => {
      // Skip auth listener in preview mode
      if (isPreviewMode) {
        console.log('🌐 Skipping auth listener in preview mode');
        return;
      }

      try {
        const { checkFirebaseReady, getAuthInstance } = await import('../config/firebase');
        const { onAuthStateChanged } = await import('firebase/auth');
        
        const isReady = await checkFirebaseReady(3000);
        if (!isReady) {
          console.warn('⚠️ Firebase not ready for auth listener');
          return;
        }

        const auth = getAuthInstance();
        if (!auth) {
          console.warn('⚠️ Auth instance not available');
          return;
        }

        unsubscribe = onAuthStateChanged(auth, async (user) => {
          setIsAuthenticated(!!user);
          if (user) {
            // Check if user is admin or barber with timeout protection
            try {
              const { safeFirebaseOperation } = await import('../config/firebase');
              const { checkIsAdmin, checkIsBarber } = await import('../../services/firebase');
              
              const [adminStatus, barberStatus] = await Promise.all([
                safeFirebaseOperation(() => checkIsAdmin(user.uid), 2, 'Check admin status'),
                safeFirebaseOperation(() => checkIsBarber(user.uid), 2, 'Check barber status')
              ]);
              
              console.log('✅ User permissions check:', { 
                email: user.email, 
                isAdmin: adminStatus || false, 
                isBarber: barberStatus || false 
              });
              
              setIsAdmin(adminStatus || false);
              setIsBarber(barberStatus || false);
            } catch (error) {
              console.error('❌ Error checking user permissions:', error);
              setIsAdmin(false);
              setIsBarber(false);
            }
          } else {
            setIsAdmin(false);
            setIsBarber(false);
          }
        });
      } catch (error) {
        console.error('❌ Auth listener setup failed:', error);
      }
    };

    setupAuthListener();

    return () => {
      if (unsubscribe) {
        unsubscribe();
      }
    };
  }, []);





  // Fetch images from Firebase gallery collection and settings with enhanced error handling
  const fetchImages = async () => {
    try {
      const { safeFirebaseOperation, getDbInstance } = await import('../config/firebase');
      const { getStorageImages } = await import('../../services/firebase');
      
      const db = getDbInstance();
      if (!db) {
        console.warn('⚠️ Firestore not available, using fallback images');
        setImagesLoading(false);
        return;
      }

      // Safely fetch gallery images
      const galleryImages: string[] = await safeFirebaseOperation(async () => {
        const galleryQuery = query(collection(db, 'gallery'), where('isActive', '==', true));
        const gallerySnapshot = await getDocs(galleryQuery);
        const images: string[] = [];
        
        gallerySnapshot.forEach((doc) => {
          const data = doc.data();
          if (data.type === 'gallery' && data.imageUrl) {
            images.push(data.imageUrl);
          }
        });
        
        // Sort by order
        images.sort((a, b) => {
          const docA = gallerySnapshot.docs.find(doc => doc.data().imageUrl === a);
          const docB = gallerySnapshot.docs.find(doc => doc.data().imageUrl === b);
          const orderA = docA?.data().order || 0;
          const orderB = docB?.data().order || 0;
          return orderA - orderB;
        });
        
        return images;
      }, 3, 'Fetch gallery images') || [];

      // Safely fetch settings images
      const settingsImages = await safeFirebaseOperation(async () => {
        const settingsDocRef = doc(db, 'settings', 'images');
        const settingsDocSnap = await getDoc(settingsDocRef);
        
        if (settingsDocSnap.exists()) {
          const data = settingsDocSnap.data();
          return {
            atmosphere: data.atmosphereImage || '',
            aboutUs: data.aboutUsImage || '',
            aboutUsBottom: data.aboutUsBottomImage || ''
          };
        }
        return { atmosphere: '', aboutUs: '', aboutUsBottom: '' };
      }, 2, 'Fetch settings images') || { atmosphere: '', aboutUs: '', aboutUsBottom: '' };

      let { atmosphere: atmosphereImage, aboutUs: aboutUsImage, aboutUsBottom: aboutUsBottomImage } = settingsImages;

      // If no aboutUsImage from settings, try storage with timeout protection
      if (!aboutUsImage) {
        const aboutusImages = await safeFirebaseOperation(async () => {
          return await getStorageImages('aboutus');
        }, 2, 'Fetch aboutus storage images') || [];

        if (aboutusImages.length > 0) {
          const aboutUsFile = aboutusImages.find(url => 
            url.toLowerCase().includes('aboutus.png') || 
            url.toLowerCase().includes('aboutus.jpg')
          );
          aboutUsImage = aboutUsFile || aboutusImages[0];
        }
      }

      // If no aboutUsBottomImage, try to get additional images
      if (!aboutUsBottomImage) {
        const additionalImages = await safeFirebaseOperation(async () => {
          const aboutusImages = await getStorageImages('aboutus');
          return aboutusImages.filter(url => url !== aboutUsImage);
        }, 2, 'Fetch additional aboutus images') || [];

        if (additionalImages.length > 0) {
          aboutUsBottomImage = additionalImages[0];
        } else {
          // Fallback to gallery collection
          const galleryAboutUs = await safeFirebaseOperation(async () => {
            const aboutUsQuery = query(collection(db, 'gallery'), 
              where('path', '==', 'aboutus/ABOUTUS'),
              where('isActive', '==', true)
            );
            const aboutUsSnapshot = await getDocs(aboutUsQuery);
            return aboutUsSnapshot.empty ? '' : aboutUsSnapshot.docs[0].data().imageUrl || '';
          }, 2, 'Fetch gallery aboutus image') || '';
          
          aboutUsBottomImage = galleryAboutUs;
        }
      }

      setSettingsImages({
        atmosphere: atmosphereImage,
        aboutUs: aboutUsImage,
        gallery: galleryImages,
        aboutUsBottom: aboutUsBottomImage,
      });
      
      console.log('✅ Images loaded successfully:', {
        galleryCount: galleryImages.length,
        hasAtmosphere: !!atmosphereImage,
        hasAboutUs: !!aboutUsImage,
        hasAboutUsBottom: !!aboutUsBottomImage
      });

    } catch (err) {
      console.error('❌ Error fetching images:', err);
      // Fallback to empty state
      setSettingsImages({
        atmosphere: '',
        aboutUs: '',
        gallery: [],
        aboutUsBottom: '',
      });
    } finally {
      setImagesLoading(false); // Always mark as loaded
    }
  };

  // Fetch messages from Firebase settings with enhanced error handling
  const fetchMessages = async () => {
    try {
      const { safeFirebaseOperation, getDbInstance } = await import('../config/firebase');
      
      const db = getDbInstance();
      if (!db) {
        console.warn('⚠️ Firestore not available for messages, using defaults');
        return;
      }

      // Load welcome messages with safe operation
      const welcomeData = await safeFirebaseOperation(async () => {
        const welcomeDoc = await getDoc(doc(db, 'settings', 'homeMessages'));
        return welcomeDoc.exists() ? welcomeDoc.data() : null;
      }, 2, 'Fetch welcome messages');

      if (welcomeData) {
        setWelcomeMessage(welcomeData.welcome || 'ברוכים הבאים ל-Barbers Bar!');
        setSubtitleMessage(welcomeData.subtitle || 'המספרה המקצועית שלך');
      }

      // Load about us text with safe operation
      const aboutData = await safeFirebaseOperation(async () => {
        const aboutDoc = await getDoc(doc(db, 'settings', 'aboutUsText'));
        return aboutDoc.exists() ? aboutDoc.data() : null;
      }, 2, 'Fetch about us text');

      if (aboutData) {
        setAboutUsMessage(aboutData.text || 'ברוכים הבאים ל-Barbers Bar! כאן תיהנו מחוויה אישית, מקצועית ומפנקת, עם יחס חם לכל לקוח. רן אגלריסי, בעל ניסיון של שנים בתחום, מזמין אתכם להתרווח, להתחדש ולהרגיש בבית.');
      }

      console.log('✅ Messages loaded successfully');
    } catch (error) {
      console.error('❌ Error fetching messages:', error);
      // Keep default messages if loading fails
    }
  };

  const handleBookingPress = () => {
    if (!isAuthenticated) {
      Alert.alert(
        'התחברות נדרשת',
        'עליך להתחבר או להירשם כדי לקבוע תור',
        [
          { text: 'ביטול', style: 'cancel' },
          { text: 'התחבר', onPress: () => onNavigate('auth') }
        ]
      );
      return;
    }
    onNavigate('booking');
  };

  const handleGalleryPress = () => {
    onNavigate('gallery');
  };

  const handleTeamPress = () => {
    onNavigate('team');
  };

  const handleCancelAppointment = async (appointmentId: string) => {
    if (isPreviewMode) {
      Alert.alert('מצב תצוגה מקדימה', 'פעולה זו אינה זמינה במצב תצוגה מקדימה', [{ text: 'הבנתי', style: 'default' }]);
      return;
    }

    try {
      const { getAuthInstance } = await import('../config/firebase');
      const { cancelAppointment } = await import('../../services/firebase');
      
      const auth = getAuthInstance();
      const currentUserId = auth?.currentUser?.uid;
      
      if (!currentUserId) {
        Alert.alert('שגיאה', 'לא ניתן לזהות את המשתמש', [{ text: 'סגור', style: 'default' }]);
        return;
      }
      
      const result = await cancelAppointment(appointmentId, currentUserId);
      
      Alert.alert(
        result.success ? 'הצלחה' : 'שגיאה',
        result.message,
        [{ text: 'אישור', style: 'default' }]
      );
      
      if (result.success) {
        // Refresh appointments list
        setTimeout(() => {
          handleMyAppointmentsPress();
        }, 1000);
      }
    } catch (error) {
      console.error('❌ Error cancelling appointment:', error);
      Alert.alert(
        'שגיאה',
        'שגיאה בביטול התור. נסה שוב מאוחר יותר.',
        [{ text: 'סגור', style: 'default' }]
      );
    }
  };

  const handleMyAppointmentsPress = async () => {
    if (isPreviewMode) {
      Alert.alert('מצב תצוגה מקדימה', 'פעולה זו אינה זמינה במצב תצוגה מקדימה', [{ text: 'הבנתי', style: 'default' }]);
      return;
    }

    if (!isAuthenticated) {
      Alert.alert(
        'התחברות נדרשת',
        'עליך להתחבר כדי לצפות בתורים שלך',
        [
          { text: 'ביטול', style: 'cancel' },
          { text: 'התחבר', onPress: () => onNavigate('auth') }
        ]
      );
      return;
    }

    try {
      // Import the function to get user appointments
      const { getAuthInstance } = await import('../config/firebase');
      const { getUserAppointments } = await import('../../services/firebase');
      
      const auth = getAuthInstance();
      const currentUserId = auth?.currentUser?.uid;
      
      if (!currentUserId) {
        Alert.alert('שגיאה', 'לא ניתן לזהות את המשתמש', [{ text: 'סגור', style: 'default' }]);
        return;
      }
      
      const userAppointments = await getUserAppointments(currentUserId);
      
      if (userAppointments.length === 0) {
        Alert.alert(
          'התורים שלי',
          'אין לך תורים קיימים',
          [
            { text: 'הזמן תור חדש', onPress: () => onNavigate('booking') },
            { text: 'סגור', style: 'cancel' }
          ]
        );
        return;
      }

      // Filter upcoming appointments
      const upcomingAppointments = userAppointments
        .filter(apt => apt.status === 'confirmed' || apt.status === 'pending')
        .slice(0, 5); // Show up to 5 appointments

      if (upcomingAppointments.length === 0) {
        Alert.alert(
          'התורים שלי',
          'אין לך תורים קרובים',
          [
            { text: 'הזמן תור חדש', onPress: () => onNavigate('booking') },
            { text: 'סגור', style: 'cancel' }
          ]
        );
        return;
      }

      // Format appointments for display
      const formatDate = (timestamp: any) => {
        if (!timestamp) return 'תאריך לא ידוע';
        const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
        return date.toLocaleDateString('he-IL', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      };

      const getStatusText = (status: string) => {
        switch (status) {
          case 'confirmed': return 'מאושר';
          case 'pending': return 'ממתין לאישור';
          case 'completed': return 'הושלם';
          case 'cancelled': return 'בוטל';
          default: return status;
        }
      };

      // Check if appointment can be cancelled (2 hours before)
      const canCancelAppointment = (appointmentDate: any) => {
        if (!appointmentDate) return false;
        const now = new Date();
        const date = appointmentDate.toDate ? appointmentDate.toDate() : new Date(appointmentDate);
        const timeDifferenceHours = (date.getTime() - now.getTime()) / (1000 * 60 * 60);
        return timeDifferenceHours >= 2;
      };

      // Get treatment and barber names for each appointment
      const appointmentDetails = await Promise.all(
        upcomingAppointments.map(async (apt) => {
          try {
            const [treatment, barber] = await Promise.all([
              import('../../services/firebase').then(m => m.getTreatments()).then(treatments => 
                treatments.find(t => t.id === apt.treatmentId)
              ),
              import('../../services/firebase').then(m => m.getBarbers()).then(barbers => 
                barbers.find(b => b.id === apt.barberId)
              )
            ]);
            
            return {
              ...apt,
              treatmentName: treatment?.name || 'טיפול לא ידוע',
              barberName: barber?.name || 'מספר לא ידוע',
              canCancel: canCancelAppointment(apt.date)
            };
          } catch (error) {
            return {
              ...apt,
              treatmentName: 'טיפול לא ידוע',
              barberName: 'מספר לא ידוע',
              canCancel: canCancelAppointment(apt.date)
            };
          }
        })
      );

      // If only one appointment, show it with cancel option
      if (appointmentDetails.length === 1) {
        const apt = appointmentDetails[0];
        const appointmentInfo = `📅 ${formatDate(apt.date)}
📋 ${apt.treatmentName}
👤 ${apt.barberName}
✅ ${getStatusText(apt.status)}`;
        
        const alertButtons: Array<{
          text: string;
          onPress?: () => void;
          style?: 'default' | 'cancel' | 'destructive';
        }> = [
          {
            text: '📋 הזמן תור חדש',
            onPress: () => onNavigate('booking')
          }
        ];

        if (apt.canCancel) {
          alertButtons.unshift({
            text: '🚫 בטל תור',
            style: 'destructive' as const,
            onPress: () => {
              Alert.alert(
                'בטל תור',
                'האם אתה בטוח שברצונך לבטל את התור?',
                [
                  { text: 'לא', style: 'cancel' },
                  {
                    text: 'כן, בטל',
                    style: 'destructive',
                    onPress: () => handleCancelAppointment(apt.id)
                  }
                ]
              );
            }
          });
        }

        alertButtons.push({
          text: '❌ סגור',
          style: 'cancel'
        });

        Alert.alert(
          '📅 התור הקרוב שלי',
          appointmentInfo,
          alertButtons
        );
      } else {
        // Multiple appointments - show list
        const appointmentList = appointmentDetails.map((apt, index) => 
          `${index + 1}. 📅 ${formatDate(apt.date)}
📋 ${apt.treatmentName}
👤 ${apt.barberName}
✅ ${getStatusText(apt.status)}${apt.canCancel ? '\n🚫 ניתן לביטול' : '\n⏰ לא ניתן לביטול (פחות מ-2 שעות)'}`
        ).join('\n\n');

        Alert.alert(
          '📅 התורים הקרובים שלי',
          appointmentList,
          [
            {
              text: '🚫 בטל תור',
              onPress: () => {
                // Show list of cancellable appointments
                const cancellableAppointments = appointmentDetails.filter(apt => apt.canCancel);
                if (cancellableAppointments.length === 0) {
                  Alert.alert(
                    'ביטול תור',
                    'אין תורים שניתנים לביטול (כל התורים פחות מ-2 שעות)',
                    [{ text: 'סגור', style: 'default' }]
                  );
                  return;
                }

                const cancelOptions: Array<{
                  text: string;
                  onPress?: () => void;
                  style?: 'default' | 'cancel' | 'destructive';
                }> = cancellableAppointments.map((apt) => ({
                  text: `${formatDate(apt.date)} - ${apt.treatmentName}`,
                  onPress: () => {
                    Alert.alert(
                      'בטל תור',
                      `האם אתה בטוח שברצונך לבטל את התור ב-${formatDate(apt.date)}?`,
                      [
                        { text: 'לא', style: 'cancel' },
                        {
                          text: 'כן, בטל',
                          style: 'destructive',
                          onPress: () => handleCancelAppointment(apt.id)
                        }
                      ]
                    );
                  }
                }));

                cancelOptions.push({ text: 'ביטול', style: 'cancel' });

                Alert.alert(
                  'בחר תור לביטול',
                  'איזה תור תרצה לבטל?',
                  cancelOptions
                );
              }
            },
            {
              text: '📋 הזמן תור חדש',
              onPress: () => onNavigate('booking')
            },
            {
              text: '❌ סגור',
              style: 'cancel'
            }
          ]
        );
      }
    } catch (error) {
      console.error('Error fetching appointments:', error);
      Alert.alert(
        'שגיאה',
        'לא ניתן לטעון את התורים כרגע',
        [{ text: 'סגור', style: 'default' }]
      );
    }
  };

  const handleCallPress = () => {
    const phoneNumber = '0548353232';
    Linking.openURL(`tel:${phoneNumber}`);
  };

  const handleNotificationPress = () => {
    setNotificationPanelVisible(true);
  };

  const handleWazePress = () => {
    // Waze navigation to Barbers Bar - רפיח ים 13, נתיבות
    const address = 'רפיח ים 13, נתיבות';
    
    // Use HTTPS URL with address - works without LSApplicationQueriesSchemes
    const wazeUrl = `https://waze.com/ul?q=${encodeURIComponent(address)}&navigate=yes&z=17`;
    
    // Direct open - no need for canOpenURL with HTTPS
    Linking.openURL(wazeUrl);
  };

  const handleOrelWhatsAppPress = () => {
    const phoneNumber = '0523985505';
    const message = 'שלום! אני מעוניין באפליקציה לעסק שלי';
    
    // Try different WhatsApp URL formats for different platforms
    const whatsappUrls = [
      `whatsapp://send?phone=972${phoneNumber.replace('0', '')}&text=${encodeURIComponent(message)}`,
      `https://wa.me/972${phoneNumber.replace('0', '')}?text=${encodeURIComponent(message)}`,
      `https://api.whatsapp.com/send?phone=972${phoneNumber.replace('0', '')}&text=${encodeURIComponent(message)}`
    ];
    
    // Try to open WhatsApp app first
    Linking.canOpenURL(whatsappUrls[0]).then(supported => {
      if (supported) {
        Linking.openURL(whatsappUrls[0]);
      } else {
        // Fallback to WhatsApp web
        Linking.openURL(whatsappUrls[1]);
      }
    });
  };

  const handleBarberWhatsAppPress = () => {
    const phoneNumber = '0548353232'; // מספר הטלפון של הספר (רן)
    const message = 'שלום! אני מעוניין לקבוע תור';
    
    // Use HTTPS URL - works without LSApplicationQueriesSchemes
    const whatsappUrl = `https://wa.me/972${phoneNumber.replace('0', '')}?text=${encodeURIComponent(message)}`;
    
    // Direct open - no need for canOpenURL with HTTPS
    Linking.openURL(whatsappUrl);
  };

  const handleInstagramPress = () => {
    const instagramUrl = 'https://www.instagram.com/ran_algrisi15?igsh=MWdyZHV4cmRwZ3kzeQ==';
    
    Linking.canOpenURL(instagramUrl).then(supported => {
      if (supported) {
        Linking.openURL(instagramUrl);
      } else {
        // Fallback to web browser
        Linking.openURL(instagramUrl);
      }
    });
  };

  // Load real notifications from Firebase
  useEffect(() => {
    loadNotifications();
  }, []);

  const loadNotifications = async () => {
    try {
      const currentUser = await getCurrentUser();
      if (currentUser) {
        const userNotifications = await getUserNotifications(currentUser.uid);
        setNotifications(userNotifications);
      }
    } catch (error) {
      console.error('Error loading notifications:', error);
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>טוען...</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <TopNav 
        title="Barbers Bar" 
        onMenuPress={() => setSideMenuVisible(true)}
        onBellPress={handleNotificationPress}
      />
      
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}> 
        {/* Hero Section */}
        <View style={styles.backgroundWrapper}>
          <ImageBackground
            source={settingsImages.atmosphere ? { uri: settingsImages.atmosphere } : require('../../assets/images/ATMOSPHERE.jpg')}
            style={styles.atmosphereImage}
            resizeMode="cover"
          >
            <LinearGradient
              colors={['transparent', 'rgba(0,0,0,0.3)', 'rgba(0,0,0,0.7)']}
              start={{ x: 0, y: 0 }}
              end={{ x: 0, y: 1 }}
              style={styles.heroGradient}
            />
          </ImageBackground>
        </View>

        {/* Greeting and CTA Section */}
        <Animated.View 
          style={[ 
            styles.greetingCtaContainer, 
            { 
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }]
            }
          ]}
        >
          <LinearGradient
            colors={['rgba(59, 130, 246, 0.1)', 'rgba(59, 130, 246, 0.05)', 'rgba(3, 3, 3, 0.95)']}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
            style={styles.cardGradient}
          />
          <View style={styles.greetingContainer}>
            <Text style={styles.greeting}>{welcomeMessage || t('home.welcome')}</Text>
            <Text style={styles.subtitle}>{subtitleMessage || t('home.subtitle')}</Text>
          </View>
          <NeonButton
            title={t('home.book_appointment')}
            onPress={() => onNavigate('booking')}
            variant="primary"
            style={styles.ctaButton}
          />
        </Animated.View>

        {/* Content */}
        <View style={styles.contentWrapper}>
          {/* Quick Actions Section */}
          <Animated.View style={[styles.quickActionsSection, { opacity: cardsFade }]}>
            <Text style={styles.sectionTitle}>פעולות מהירות</Text>
            <View style={styles.quickActionsContainer}>
              <TouchableOpacity style={styles.quickActionButton} onPress={handleTeamPress}>
                <LinearGradient
                  colors={['rgba(59, 130, 246, 0.1)', 'rgba(255, 255, 255, 0.95)']}
                  start={{ x: 0, y: 0 }}
                  end={{ x: 1, y: 1 }}
                  style={styles.quickActionGradient}
                />
                <Ionicons name="people" size={28} color="#3b82f6" />
                <Text style={styles.quickActionText}>הצוות שלנו</Text>
              </TouchableOpacity>
              
              <TouchableOpacity style={styles.quickActionButton} onPress={handleMyAppointmentsPress}>
                <LinearGradient
                  colors={['rgba(59, 130, 246, 0.1)', 'rgba(255, 255, 255, 0.95)']}
                  start={{ x: 0, y: 0 }}
                  end={{ x: 1, y: 1 }}
                  style={styles.quickActionGradient}
                />
                <Ionicons name="calendar" size={28} color="#3b82f6" />
                <Text style={styles.quickActionText}>התורים שלי</Text>
              </TouchableOpacity>
              
              <TouchableOpacity style={styles.quickActionButton} onPress={handleCallPress}>
                <LinearGradient
                  colors={['rgba(59, 130, 246, 0.1)', 'rgba(255, 255, 255, 0.95)']}
                  start={{ x: 0, y: 0 }}
                  end={{ x: 1, y: 1 }}
                  style={styles.quickActionGradient}
                />
                <Ionicons name="call" size={28} color="#3b82f6" />
                <Text style={styles.quickActionText}>התקשר</Text>
              </TouchableOpacity>
              

            </View>
          </Animated.View>

          {/* 3D Gallery Carousel Section */}
          <Animated.View style={[styles.gallerySection, { opacity: cardsFade }]}>
              <Text style={styles.sectionTitle}>{t('home.gallery')}</Text>
              <View style={styles.carousel3DContainer}>
                {imagesLoading || galleryImages.length === 0 ? (
                  <View style={styles.galleryLoadingContainer}>
                    <ActivityIndicator size="large" color="#3b82f6" />
                    <Text style={styles.galleryLoadingText}>טוען גלריה...</Text>
                  </View>
                ) : (
                  <Animated.ScrollView 
                    ref={carousel3DRef}
                    horizontal 
                    showsHorizontalScrollIndicator={false} 
                    contentContainerStyle={styles.carousel3DContent}
                    pagingEnabled={false}
                    decelerationRate={0.98}
                    onScroll={Animated.event(
                      [{ nativeEvent: { contentOffset: { x: scrollX } } }],
                      { useNativeDriver: false, listener: handleScroll }
                    )}
                    scrollEventThrottle={8}
                    removeClippedSubviews={false}
                    bounces={false}
                    alwaysBounceHorizontal={false}
                    overScrollMode="never"
                    directionalLockEnabled={true}
                    maximumZoomScale={1}
                    minimumZoomScale={1}
                  >
                    {galleryImages.map((img, index) => (
                      <Animated.View 
                        key={`gallery-${index}`}
                        style={[ 
                          styles.carousel3DCard,
                          getCardTransform(index, scrollX),
                        ]}
                      >
                        <Image
                          source={{ 
                            uri: img,
                            cache: 'force-cache'
                          }}
                          style={styles.carousel3DImage}
                          resizeMode="cover"
                          blurRadius={0}
                        />
                        <View style={styles.carousel3DOverlay}>
                          <LinearGradient
                            colors={['transparent', 'rgba(0,0,0,0.9)']}
                            style={styles.carousel3DGradient}
                          />
                        </View>
                        {/* Reflection effect removed - was covering gallery images */}
                        {/* <View style={styles.carousel3DReflection}>
                          <LinearGradient
                            colors={['rgba(255,255,255,0.3)', 'transparent']}
                            style={styles.carousel3DReflectionGradient}
                          />
                        </View> */}
                      </Animated.View>
                    ))}
                  </Animated.ScrollView>
                )}
              </View>
          </Animated.View>
          {/* About Us Section */}
          <Animated.View style={[styles.aboutUsSection, { opacity: cardsFade }]}>
            <Text style={styles.sectionTitle}>הכירו אותנו</Text>
            <View style={styles.aboutUsCard}>
              <LinearGradient
                colors={['rgba(59, 130, 246, 0.1)', 'rgba(139, 69, 19, 0.1)', 'rgba(0, 0, 0, 0.05)']}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 1 }}
                style={styles.aboutUsGradient}
              />
              <Image
                source={settingsImages.aboutUs ? { uri: settingsImages.aboutUs } : require('../../assets/images/ATMOSPHERE.jpg')}
                style={styles.aboutUsTopImage}
                resizeMode="cover"
              />
              <View style={styles.aboutUsContent}>
                <Text style={styles.aboutUsText}>
                  {aboutUsMessage}
                </Text>
                {settingsImages.aboutUsBottom && (
                  <Image
                    source={{ uri: settingsImages.aboutUsBottom }}
                    style={styles.aboutUsBottomImage}
                    resizeMode="cover"
                  />
                )}
              </View>
            </View>
          </Animated.View>

          {/* Social Media Links */}
          <Animated.View style={[styles.socialSection, { opacity: cardsFade }]}>
            <Text style={styles.sectionTitle}>עקבו אחרינו</Text>
            <View style={styles.socialContainer}>
              <TouchableOpacity style={styles.socialButton} onPress={handleInstagramPress}>
                <Ionicons name="logo-instagram" size={28} color="#E4405F" />
                <Text style={styles.socialText}>Instagram</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.socialButton}>
                <Ionicons name="logo-facebook" size={28} color="#1877F2" />
                <Text style={styles.socialText}>Facebook</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.socialButton} onPress={handleBarberWhatsAppPress}>
                <Ionicons name="logo-whatsapp" size={28} color="#25D366" />
                <Text style={styles.socialText}>WhatsApp</Text>
              </TouchableOpacity>
            </View>
          </Animated.View>

          {/* Waze Navigation */}
          <Animated.View style={[styles.wazeSection, { opacity: cardsFade }]}>
            <Text style={styles.sectionTitle}>נווט אלינו</Text>
            <TouchableOpacity style={styles.wazeButton} onPress={handleWazePress}>
              <LinearGradient
                colors={['#33CCFF', '#0099CC']}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 1 }}
                style={styles.wazeGradient}
              />
              <Ionicons name="navigate" size={32} color="#ffffff" />
              <Text style={styles.wazeText}>נווט עם Waze</Text>
            </TouchableOpacity>
          </Animated.View>

          {/* Contact Section */}
          <Animated.View style={[styles.contactSection, { opacity: cardsFade }]}>
            <Text style={styles.sectionTitle}>צור קשר</Text>
            <View style={styles.contactInfo}>
              <LinearGradient
                colors={['rgba(59, 130, 246, 0.05)', 'rgba(255, 255, 255, 0.95)']}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 1 }}
                style={styles.contactGradient}
              />
              <View style={styles.contactItem}>
                <Ionicons name="call" size={20} color="#3b82f6" />
                <Text style={styles.contactText}>0548353232</Text>
              </View>
              <View style={styles.contactItem}>
                <Ionicons name="location" size={20} color="#3b82f6" />
                <Text style={styles.contactText}>{require('../../constants/contactInfo').CONTACT_INFO.displayAddress}</Text>
              </View>
              <View style={styles.contactItem}>
                <Ionicons name="time" size={20} color="#3b82f6" />
                <Text style={styles.contactText}>א&apos;-ה&apos; 9:00-20:00, ו&apos; 9:00-15:00</Text>
              </View>
            </View>
          </Animated.View>

          {/* Terms of Service */}
          <View style={styles.termsSection}>
            <TouchableOpacity onPress={() => setShowTerms(true)} style={styles.termsButton}>
              <Text style={styles.termsText}>תנאי שימוש</Text>
            </TouchableOpacity>
          </View>

          {/* Orel Aharon Signature */}
          <View style={styles.orelSection}>
            <Text style={styles.orelText}>Powered by</Text>
            <TouchableOpacity onPress={handleOrelWhatsAppPress} style={styles.orelButton}>
              <Text style={styles.orelName}>Orel Aharon</Text>
            </TouchableOpacity>
            <Text style={styles.orelSubtext}>רוצה אפליקציה כזו לעסק שלך?</Text>
          </View>
        </View>
      </ScrollView>

      {/* Side Menu */}
      <SideMenu 
        visible={sideMenuVisible} 
        onClose={() => setSideMenuVisible(false)}
        onNavigate={onNavigate}
        onShowAbout={() => setShowAboutModal(true)}
      />

      {/* About Modal */}
      <AboutModal 
        visible={showAboutModal}
        onClose={() => setShowAboutModal(false)}
      />

      {/* Notification Panel */}
      {notificationPanelVisible && (
        <View style={styles.notificationOverlay}>
          <View style={styles.notificationPanel}>
            <View style={styles.notificationHeader}>
              <Text style={styles.notificationTitle}>התראות</Text>
              <TouchableOpacity 
                onPress={() => setNotificationPanelVisible(false)}
                style={styles.notificationCloseButton}
              >
                <Ionicons name="close" size={24} color="#666" />
              </TouchableOpacity>
            </View>
            
            <ScrollView style={styles.notificationList}>
              {notifications.length === 0 ? (
                <View style={styles.emptyNotificationState}>
                  <Ionicons name="notifications-off-outline" size={48} color="#ccc" />
                  <Text style={styles.emptyNotificationText}>אין התראות חדשות</Text>
                  <Text style={styles.emptyNotificationSubtext}>כשתהיה לך התראה חדשה, היא תופיע כאן</Text>
                </View>
              ) : (
                notifications.map((notification) => (
                  <View key={notification.id} style={styles.notificationItem}>
                    <View style={styles.notificationIcon}>
                      {notification.type === 'appointment' || notification.type === 'confirmation' && (
                        <Ionicons name="calendar" size={20} color="#3b82f6" />
                      )}
                      {notification.type === 'reminder' && (
                        <Ionicons name="alarm" size={20} color="#FF9800" />
                      )}
                      {notification.type === 'cancellation' && (
                        <Ionicons name="close-circle" size={20} color="#ef4444" />
                      )}
                      {notification.type === 'general' && (
                        <Ionicons name="megaphone" size={20} color="#4CAF50" />
                      )}
                    </View>
                    <View style={styles.notificationContent}>
                      <Text style={styles.notificationItemTitle}>{notification.title}</Text>
                      <Text style={styles.notificationItemMessage}>{notification.message}</Text>
                      <Text style={styles.notificationItemTime}>
                        {notification.createdAt.toLocaleDateString('he-IL', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </Text>
                    </View>
                  </View>
                ))
              )}
            </ScrollView>
          </View>
        </View>
      )}

      {/* Terms Modal */}
      {showTerms && (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>תנאי שימוש ומדיניות פרטיות</Text>
            <ScrollView style={styles.modalScrollView}>
              <Text style={styles.modalText}>
                <Text style={styles.sectionTitle}>תנאי שימוש - Barbers Bar{'\n'}</Text>
                
                <Text style={styles.subsectionTitle}>1. קבלת השירות{'\n'}</Text>
                • השירות מיועד לקביעת תורים במספרה Barbers Bar{'\n'}
                • יש לספק מידע מדויק ומלא בעת קביעת התור{'\n'}
                • המספרה שומרת לעצמה את הזכות לסרב לתת שירות במקרים חריגים{'\n\n'}
                
                <Text style={styles.subsectionTitle}>2. ביטול תורים{'\n'}</Text>
                • ביטול תור יש לבצע לפחות 2 שעות לפני מועד התור{'\n'}
                • ביטול מאוחר יותר מ-2 שעות עלול לחייב תשלום{'\n'}
                • במקרה של איחור של יותר מ-15 דקות, התור עלול להתבטל{'\n\n'}
                
                <Text style={styles.subsectionTitle}>3. תשלומים{'\n'}</Text>
                • התשלום מתבצע במספרה לאחר קבלת השירות{'\n'}
                • המחירים כפי שמופיעים באפליקציה{'\n'}
                • המספרה שומרת לעצמה את הזכות לשנות מחירים{'\n\n'}
                
                <Text style={styles.subsectionTitle}>4. אחריות{'\n'}</Text>
                • המספרה מתחייבת לאיכות השירות{'\n'}
                • במקרה של אי שביעות רצון, יש לפנות למנהל המספרה{'\n'}
                • המספרה לא אחראית לנזקים עקיפים{'\n\n'}
                
                <Text style={styles.sectionTitle}>מדיניות פרטיות{'\n\n'}</Text>
                
                <Text style={styles.subsectionTitle}>1. איסוף מידע{'\n'}</Text>
                • אנו אוספים: שם מלא, מספר טלפון, פרטי תורים{'\n'}
                • המידע נאסף לצורך מתן השירות בלבד{'\n'}
                • לא נאסוף מידע מיותר{'\n\n'}
                
                <Text style={styles.subsectionTitle}>2. שימוש במידע{'\n'}</Text>
                • המידע משמש לקביעת תורים ותקשורת{'\n'}
                • לא נשתף את המידע עם צדדים שלישיים{'\n'}
                • לא נשלח הודעות פרסומיות ללא אישור{'\n\n'}
                
                <Text style={styles.subsectionTitle}>3. אבטחה{'\n'}</Text>
                • המידע מאוחסן באופן מאובטח{'\n'}
                • גישה למידע מוגבלת לעובדי המספרה בלבד{'\n'}
                • נעדכן את האבטחה לפי הצורך{'\n\n'}
                
                <Text style={styles.subsectionTitle}>4. זכויות המשתמש{'\n'}</Text>
                • הזכות לבקש עותק מהמידע שלך{'\n'}
                • הזכות לבקש מחיקה של המידע{'\n'}
                • הזכות לעדכן את המידע{'\n\n'}
                
                <Text style={styles.subsectionTitle}>5. עדכונים{'\n'}</Text>
                • מדיניות זו עשויה להתעדכן{'\n'}
                • עדכונים יפורסמו באפליקציה{'\n'}
                • המשך השימוש מהווה הסכמה לתנאים המעודכנים{'\n\n'}
                
                <Text style={styles.contactInfoText}>
                  {require('../../constants/contactInfo').CONTACT_INFO.contactText}{'\n'}
                  מייל: info@barbersbar.co.il
                </Text>
              </Text>
            </ScrollView>
            <TouchableOpacity 
              style={styles.modalCloseButton} 
              onPress={() => setShowTerms(false)}
            >
              <Text style={styles.modalCloseText}>סגור</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
  },
  loadingText: {
    fontSize: 18,
    color: '#666',
  },
  scrollView: {
    flex: 1,
  },
  backgroundWrapper: {
    height: height * 0.55,
    position: 'relative',
    overflow: 'hidden',
  },
  atmosphereImage: {
    width: '100%',
    height: '100%',
    borderBottomLeftRadius: 30,
    borderBottomRightRadius: 30,
    overflow: 'hidden',
  },
  heroGradient: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    height: '100%',
    zIndex: 1,
  },
  greetingCtaContainer: {
    position: 'absolute',
    top: height * 0.42,
    left: 30,
    right: 30,
    zIndex: 10,
    borderRadius: 20,
    overflow: 'hidden',
    minHeight: 140,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 8,
    },
    shadowOpacity: 0.3,
    shadowRadius: 12,
    elevation: 15,
  },
  cardGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  ctaButton: {
    position: 'absolute',
    bottom: 20,
    left: 20, // כפתור משמאל לטקסט
    zIndex: 2,
  },
  greetingContainer: {
    position: 'absolute',
    bottom: 20,
    right: 20,  // טקסט מימין
    left: 140,  // מקום לכפתור משמאל
    zIndex: 2,
  },
  greeting: {
    fontSize: 18,
    fontWeight: '600',
    color: '#ffffff',
    textAlign: 'right',
    marginBottom: 6,
    textShadowColor: 'rgba(0, 0, 0, 0.7)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 3,
  },
  subtitle: {
    fontSize: 14,
    color: '#e0e0e0',
    textAlign: 'right',
    fontWeight: '400',
    textShadowColor: 'rgba(0, 0, 0, 0.5)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 2,
  },
  contentWrapper: {
    paddingTop: 120,
    paddingHorizontal: 20,
    paddingBottom: 40,
  },
  neonButton: {
    paddingVertical: 14,
    paddingHorizontal: 28,
    borderRadius: 25,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#3b82f6',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.4,
    shadowRadius: 12,
    elevation: 10,
    borderWidth: 2,
  },
  neonButtonPrimary: {
    backgroundColor: '#3b82f6',
    borderColor: '#60a5fa',
    shadowColor: '#3b82f6',
  },
  neonButtonSecondary: {
    backgroundColor: 'rgba(59, 130, 246, 0.1)',
    borderColor: '#3b82f6',
    shadowColor: '#3b82f6',
  },
  neonButtonText: {
    fontSize: 14,
    fontWeight: '600',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 2,
  },
  neonButtonTextPrimary: {
    color: '#ffffff',
  },
  neonButtonTextSecondary: {
    color: '#3b82f6',
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#1a1a1a',
    marginBottom: 12,
    textAlign: 'center',
  },
  quickActionsSection: {
    marginBottom: 15,
    paddingVertical: 3,
  },
  quickActionsContainer: {
    flexDirection: 'row-reverse', // Fixed: Changed to row-reverse for RTL
    justifyContent: 'space-between',
    paddingHorizontal: 10,
  },
  quickActionButton: {
    flex: 1,
    marginHorizontal: 5,
    borderRadius: 15,
    overflow: 'hidden',
    backgroundColor: '#ffffff',
    paddingVertical: 20,
    paddingHorizontal: 15,
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: 100,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  quickActionGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  quickActionText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#1a1a1a',
    marginTop: 8,
    textAlign: 'center',
  },
  gallerySection: {
    marginBottom: 15,
    paddingVertical: 10,
  },
  carousel3DContainer: {
    height: 420,
    overflow: 'hidden',
    marginVertical: 20,
  },
  carousel3DContent: {
    paddingHorizontal: 80,
    alignItems: 'center',
  },
  carousel3DCard: {
    width: 280,
    height: 380,
    marginHorizontal: 10,
    borderRadius: 25,
    overflow: 'hidden',
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 12 },
    shadowOpacity: 0.4,
    shadowRadius: 20,
    elevation: 20,
    borderWidth: 2,
    borderColor: 'rgba(255,255,255,0.8)',
  },
  carousel3DImage: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
    backgroundColor: '#f0f0f0',
  },
  carousel3DOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    height: '60%',
  },
  carousel3DGradient: {
    flex: 1,
  },
  carousel3DReflection: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: '40%',
  },
  carousel3DReflectionGradient: {
    flex: 1,
  },
  aboutUsSection: {
    marginBottom: 20,
    paddingVertical: 5,
  },
  aboutUsCard: {
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: '#ffffff',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 6,
    },
    shadowOpacity: 0.15,
    shadowRadius: 10,
    elevation: 8,
  },
  aboutUsGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  aboutUsTopImage: {
    width: '100%',
    height: 200,
  },
  aboutUsContent: {
    padding: 24,
  },
  aboutUsText: {
    fontSize: 16,
    color: '#333333',
    lineHeight: 24,
    textAlign: 'right',
    fontWeight: '400',
  },
  socialSection: {
    marginBottom: 20,
    paddingVertical: 8,
  },
  socialContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingHorizontal: 20,
  },
  socialButton: {
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#ffffff',
    borderRadius: 20,
    paddingVertical: 16,
    paddingHorizontal: 20,
    minWidth: 100,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  socialText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#333333',
    marginTop: 6,
  },
  contactSection: {
    marginBottom: 25,
    paddingVertical: 8,
  },
  contactInfo: {
    backgroundColor: '#ffffff',
    borderRadius: 20,
    padding: 24,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 6,
    },
    shadowOpacity: 0.15,
    shadowRadius: 10,
    elevation: 8,
  },
  contactGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  contactItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    paddingVertical: 3,
  },
  contactText: {
    fontSize: 16,
    color: '#1a1a1a',
    marginLeft: 12,
    fontWeight: '500',
  },
  aboutUsBottomImage: {
    width: '100%',
    height: 180,
    borderRadius: 15,
    marginTop: 12,
  },
  termsSection: {
    alignItems: 'center',
    marginBottom: 15,
    paddingVertical: 8,
  },
  termsButton: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  termsText: {
    fontSize: 14,
    color: '#666666',
    textDecorationLine: 'underline',
  },
  modalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  modalContent: {
    backgroundColor: '#ffffff',
    borderRadius: 20,
    padding: 24,
    margin: 20,
    maxHeight: '80%',
    width: '90%',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 10,
    },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 20,
  },
  modalTitle: {
    fontSize: 22,
    fontWeight: '700',
    color: '#1a1a1a',
    textAlign: 'center',
    marginBottom: 16,
  },
  modalScrollView: {
    maxHeight: 300,
    marginBottom: 16,
  },
  modalText: {
    fontSize: 16,
    color: '#333333',
    lineHeight: 24,
    textAlign: 'right',
  },
  modalCloseButton: {
    backgroundColor: '#3b82f6',
    borderRadius: 12,
    paddingVertical: 14,
    alignItems: 'center',
  },
  modalCloseText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#ffffff',
  },
  subsectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
    marginTop: 10,
    marginBottom: 5,
  },
  contactInfoText: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    marginTop: 15,
  },
  galleryLoadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 50,
  },
  galleryLoadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  notificationOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end', // Align to the bottom
    zIndex: 1000,
  },
  notificationPanel: {
    backgroundColor: '#ffffff',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.1,
    shadowRadius: 10,
    elevation: 15,
    width: '100%',
  },
  notificationHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  notificationTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#1a1a1a',
  },
  notificationCloseButton: {
    padding: 5,
  },
  notificationList: {
    maxHeight: 300, // Limit height for scrolling
  },
  emptyNotificationState: {
    alignItems: 'center',
    paddingVertical: 40,
  },
  emptyNotificationText: {
    fontSize: 16,
    color: '#666',
    marginTop: 12,
    marginBottom: 8,
    textAlign: 'center',
  },
  emptyNotificationSubtext: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
  },
  unreadNotification: {
    backgroundColor: '#f0f8ff',
    borderLeftWidth: 4,
    borderLeftColor: '#007bff',
  },
  notificationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  notificationIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#f0f0f0',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  notificationContent: {
    flex: 1,
  },
  notificationItemTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1a1a1a',
    marginBottom: 3,
  },
  notificationItemMessage: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 3,
  },
  notificationItemTime: {
    fontSize: 12,
    color: '#999999',
  },
  wazeSection: {
    marginTop: 15,
    paddingVertical: 8,
  },
  wazeButton: {
    backgroundColor: '#ffffff',
    borderRadius: 20,
    paddingVertical: 16,
    paddingHorizontal: 20,
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: 100,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  wazeGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderRadius: 20,
  },
  wazeText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333',
    marginTop: 6,
  },
  orelSection: {
    alignItems: 'center',
    marginTop: 20,
    paddingVertical: 10,
  },
  orelText: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 5,
  },
  orelButton: {
    backgroundColor: '#25D366',
    borderRadius: 20,
    paddingVertical: 10,
    paddingHorizontal: 20,
    alignItems: 'center',
    justifyContent: 'center',
    minWidth: 150,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 5,
  },
  orelName: {
    fontSize: 16,
    fontWeight: '700',
    color: '#ffffff',
  },
  orelSubtext: {
    fontSize: 12,
    color: '#666666',
    marginTop: 5,
  },
  callButton: {
    backgroundColor: '#25D366',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 14,
    paddingHorizontal: 20,
    borderRadius: 12,
    shadowColor: '#25D366',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 4,
  },
  callButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
});

export default HomeScreen;